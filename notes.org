#+title: Notes
* Tests mit Abgaben
** Tetris (Felix Schoeller)
*** Absturz bei manchen Tetrominos wenn diese gedreht und an den rechten Bildschirmrand bewegt werden
*** Absturz auch in offiziellem Emulator (bei VM stdlib) -> kein Bug
*** Wird wahrscheinlich nicht mehr crashen, wenn alle stdlib Funktionen nativ sind
** Minesweeper (Patrick Müller)
*** Absturz nach zu vielen Moves
*** Absturz auch in offiziellem Emulator -> kein Bug
*** Fehler war Memory leak, ist im offiziellen Emulator nicht so schnell aufgefallen, da dieser langsamer ist
** Doom (Jona Leon Heywinkel)
*** Absturz wenn man ein bisschen nach Rechts geht, dann nach vorne (in den Dämon)
*** Absturz auch in offiziellem Emulator -> kein Bug
** Raycaster (Julius Armbrüster)
*** läuft ohne Probleme
*** Performance wie in offiziellem Emulator, aber mit weniger jittering
*** Performance ist sehr abhängig von nativer Screen Implementierung
* TODOs
** TODO CLI [0/2]
- [ ] Test Script runner [0/2]
  - [ ] Korrekte ausführung der VM durch tst Skript
  - [ ] Output Datei neben cmp Datei speichern
- [ ] interface
  - [ ] Skripte aus Ordner laden (cli argument)
  - [ ] Tests ausführen wenn vorhanden (Struktur wie in projects Ordner)
  - [ ] mit flag Desktop Modus starten
  - [ ] steps per tick als cli argument
  - [ ]
** TODO CPU Emulator [0/1]
  - [ ] CPU Emulator implementieren
** TODO VM Emulator [9/12]
- [X] alle commands implementieren
- [X] command parsing
- [X] funktionen erkennen die aufgerufen aber nicht deklariert werden
- [X] native stdlib implementieren [8/8]
  - [X] Math
  - [X] String
  - [X] Array
  - [X] Output
  - [X] Screen
  - [X] Keyboard
  - [X] Memory
  - [X] Sys
- [X] unbekannte funktionen in stdlib suchen und adden falls nötig
- [X] Start der Ausführung bei Sys.init falls vorhanden
- [X] Debug Infos für Funktionen
- [X] Erfolgreiche Ausführung verschiedener Projekt 9 Abgaben
- [X] Ordentliches error handling
  - [X] kein unwrap/expect
  - [X] keine [] Zugriffe in Listen (außer absolut sicher, wie z.B. in stdlib)
- [ ] Debug Infos für lokale Label
- [ ] checken ob Funktionsname zu Klassennamen passt
** TODO VM Frontend [13/22]
- [X] vm step aus frontend aufrufen
- [X] display speicher in canvas rendern
- [X] keyboard interaktion in vm speicher schreiben
- [X] Geschwindigkeitsregulation
- [X] Step Button
- [X] Run Button
- [X] Stop Button
- [X] Revert Button
- [X] Laden von User code
- [X] Anzeige des Bytecodes
- [X] Anzeige des Stacks
- [X] Anzeige der Locals
- [X] Anzeige der Arguments
- [ ] Anzeige des Call stacks
- [ ] Anzeige der Statics
- [ ] Anzeige des globalen RAMS
- [ ] Anzeige von This
- [ ] Anzeige von That
- [ ] Anzeige von Temp
- [ ] Anzeige des globalen Stacks
- [ ] Numberformat switcher
- [ ] Anzeige des Keyboard Inputs
** TODO BUGS [1/3]
- [X] Screen in VM zu groß bei 1080p -> scrolling
- [ ] bytecode view sollte nur body scrollen, nicth den <file>: <function> header
- [ ] VM fehler crasht UI
** TODO sonstiges [0/3]
- [ ] Benchmark: da0ce4500f653afe7892395c63414eb1d05ff730 vs Nachfolger
- [ ] Benchmark: 3fcc146df140f95a7be8290d897cc46b4dbccc59 vs Nachfolger
- [ ] Dependency section in Readme (auch für Desktop)
* Themen für die BA
** Erklären
*** originale Tools / was ist nand 2 tetris
**** folien alle creative commons
*** rust
*** wasm
*** react
** Reimplementierung der VM mit deutlich besserer Performance/Stabilität
*** step weise Ausführung
*** bytecode design
**** enum vs union
*** parsing
*** keyboard handling
**** bug für bug compatibility
** Native stdlib
*** Protokoll für Pausiren/Fortsetzen der builtin Funktionen
*** kompliziert in wasm, da keine Thread.wait möglich
*** state machine ähnlich zu async-await
** Web UI (React & CSS)
*** auch Einleitung für react geben
*** adaptiv (für verschiedene screen größen)
*** bytecode view & memory watches
*** rendering in rust -> canvas.putImageData
** Tracing für Entwickler
*** Desktop Modus mit SDL (conditional compilation)
** Testing
*** Portierung der test Skripte zu rust unit tests
